@model VisualiserWebProject.Models.TestQuestion

@{
    ViewBag.Title = "Details";
}

<h2 style="text-align:center">Question Information and Response Distribution</h2>

<h4>Question: @Html.DisplayFor(model => model.Question.qText)</h4>
<hr />

<div id="wrapper">
    <div id="dataTable" class="float_child">
        <dl class="dl-horizontal">

            <dt>
                @Html.DisplayNameFor(model => model.Question.qCorrectAnswer)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Question.qCorrectAnswer) (@Html.DisplayFor(model => model.correctSelected))
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Question.qDistractor1)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Question.qDistractor1) (@Html.DisplayFor(model => model.qD1Selected))
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Question.qDistractor2)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Question.qDistractor2) (@Html.DisplayFor(model => model.qD2Selected))
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Question.qDistractor3)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Question.qDistractor3) (@Html.DisplayFor(model => model.qD3Selected))
            </dd>
        </dl>
    </div>
    <div id="bars" class="float_child">
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.difficultyIndex)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.difficultyIndex)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.discriminationIndex)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.discriminationIndex)
            </dd>
        </dl>

        @*TODO: data bars*@
        <div id="difIndex">

        </div>
        <div id="discIndex">

        </div>
    </div>
</div>


<div id="histogram">
    <h1>Chart</h1>
    
</div>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>

<style>
    #wrapper {
        display: flex;
    }

    .float_child {
        flex: 1;
        padding: 10px;
    }

/*    #histogram text {
        fill: white;
        font: 10px sans-serif;
        text-anchor: end;
    }

    .axis text {
        font: 10px sans-serif;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #fff;
        shape-rendering: crispEdges;
    }

    path {
        stroke: steelblue;
        stroke-width: 2;
        fill: none;
    }*/
</style>

<script src="https://cdn.canvasjs.com/ga/canvasjs.min.js"></script>
<script src="https://cdn.canvasjs.com/ga/canvasjs.stock.min.js"></script>
<script>
    window.onload = function () {

        var datay = [];
        var array = @ViewBag.JData;
        for(var i = 0; i < array.length; i++) {
            datay[i] = array[i];
        }

        var labels = [];
        array = @Html.Raw(@ViewBag.JLabels);
        for (var i = 0; i < array.length; i++) {
            if (array[i] == 0 || array[i] == null) {
                array[i] = 0
            } else {
                labels[i] = array[i];
            }
        }

        var chart = new CanvasJS.Chart("histogram", {
            animationEnabled: true,
            theme: "light2", // "light1", "light2", "dark1", "dark2"
            title: {
                text: "Response Distribution"
            },
            axisY: {
                title: "Number Selected"
            },
            data: [{
                type: "column",
                showInLegend: true,
                legendMarkerColor: "grey",
                legendText: "Number of Students",
                dataPoints: [
                    { y: datay[0], label: labels[0] },
                    { y: datay[1], label: labels[1] },
                    { y: datay[2], label: labels[2] },
                    { y: datay[3], label: labels[3] }
                ]
            }]
        });
        chart.render();

    }
</script>


@*<script type="text/javascript">

    $(document).ready(function () {
        Plot();
    });

    function Plot() {
        var yearData;
        var salesData;

        var data = [{
            'Year': '2012',
            'Sale': 2000
        },
        {
            'Year': '2014',
            'Sale': 3000
        },
        {
            'Year': '2015',
            'Sale': 5000
        }
        ]

        yearData = GetYears(data)
        salesData = GetSales(data)

        var width = 600,
            height = 400;

        var histogram = d3.select("#histogram")
            .append("svg") //append svg element inside #histogram
            .attr("width", width + (2 * margin.left) + margin.right) //set width
            .attr("height", height + margin.top + margin.bottom); //set height


        var x = d3.scale.ordinal().domain(yearData).rangePoints([margin.left, width]);
        var y = d3.scale.linear().domain(salesData).range([height, 0]);


        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom").ticks(data.Year); //orient bottom because x-axis will appear below the bars
        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left").ticks(10);

        // Define the line
        var valueline = d3.svg.line()
            .x(function (d) {
                return x(d.Year);
            })
            .y(function (d) {
                return y(d.Sale);
            });


        histogram.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

        histogram.append("g")
            .attr("class", "y axis")
            .attr("transform", "translate(" + margin.left + ",0)")
            .call(yAxis)
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("Sales Data");

        // Add the valueline path.
        histogram.append("path")
            .attr("class", "line")
            .attr("d", valueline(data));


    }


    function GetYears(data) {
        var result = [];
        for (var i in data)
            result.push(data[i].Year);

        return result;
    }

    function GetSales(data) {
        var result = [];
        var max = 0.0;
        result.push(max);
        for (var i in data) {
            if (max < data[i].Sale) {
                max = data[i].Sale
            }
        }
        result.push(max + 50);

        return result;
    }
</script>*@
